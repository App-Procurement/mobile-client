import 'package:flutter/material.dart';
import 'package:get/get_instance/src/extension_instance.dart';
import 'package:get/utils.dart';
import 'package:procurementapp/Controller/ReceivedRFPController.dart';
import 'package:procurementapp/color.dart' as color;
import 'package:procurementapp/rootScreens/common.dart';
import 'package:procurementapp/rootScreens/profile.dart';
import 'package:procurementapp/tabBar.dart';

class RecievedRFPDetail extends StatefulWidget {
  final id;
  RecievedRFPDetail({
    Key? key,
    this.id,
  }) : super(key: key);
  @override
  State<RecievedRFPDetail> createState() => _RecievedRFPDetailState();
}

final ReceivedRFPController Controller = Get.find<ReceivedRFPController>();

class _RecievedRFPDetailState extends State<RecievedRFPDetail>
    with TickerProviderStateMixin {
  TextEditingController comment_TXT = new TextEditingController();
  int orederLength = 10;
  List<dynamic> trackdata = [
    {
      'title': 'Request created by',
      'subTitle': 'james Harpeny',
      'status': 'compeleted',
      'date': 'Mar 21, 2021',
      'time': '08:00 PM'
    },
    {
      'title': 'Request approved by',
      'subTitle': 'PSDS Admin',
      'status': 'compeleted',
      'date': 'Mar 21, 2021',
      'time': '08:00 PM'
    },
    {
      'title': 'P.O Generated by',
      'subTitle': ' PSDS Admin',
      'status': 'compeleted',
      'date': 'Mar 21, 2021',
      'time': '08:00 PM'
    },
    {
      'title': 'Request Created by',
      'subTitle': 'james Harpeny',
      'status': 'compeleted',
      'date': 'Mar 21, 2021',
      'time': '08:00 PM'
    }
  ];
  late TabController _controller;

  int current_step = 0;
  List<Step> stepsList = [];
  @override
  void initState() {
    Controller.GetReceivedRFP_Detail(widget.id);
    _controller = TabController(length: 4, vsync: this, initialIndex: 0);
    for (int i = 0; i < trackdata.length; i++) {
      Map<String, String> data = trackdata[i];
      stepsList.add(
        Step(
          title: Column(
            children: [
              Text(data["date"].toString()),
              Text(data["time"].toString())
            ],
          ),
          content: Container(
            decoration: BoxDecoration(
                color: color.backgroundColor,
                borderRadius: BorderRadius.circular(15)),
            // height: 70,
            width: 200,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                const CircleAvatar(
                  radius: 20,
                  child: Icon(Icons.museum_rounded),
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(data["title"].toString()),
                    Text(data["subTitle"].toString())
                  ],
                )
              ],
            ),
          ),
          isActive: true,
        ),
      );
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: color.backgroundColor,
        bottomNavigationBar: Common().bottomAppbar(context),
        body: Center(
          child: SingleChildScrollView(
            child: Container(
              // color: color.grey1,
              padding: const EdgeInsets.only(top: 20),
              width: MediaQuery.of(context).size.width * 0.9,
              // height: MediaQuery.of(context).size.height,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: <Widget>[
                  Common().userProfile(context),
                  const Text("Recieved RFP",
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 24,
                        color: color.blue1,
                        fontWeight: FontWeight.bold,
                      )),
                  Container(
                    padding: const EdgeInsets.all(10.0),
                    decoration: BoxDecoration(
                        color: color.red5,
                        borderRadius: BorderRadius.circular(20.0)),
                    child: Text(
                      '#${Controller.Received_RFP_Detail['status']}',
                      style: const TextStyle(color: color.pink1),
                    ),
                  ),
                  Container(
                    height: 50,
                    width: MediaQuery.of(context).size.width,
                    child: TabBar(
                      labelColor: color.perpal1,
                      unselectedLabelColor: color.grey7,
                      indicator: const UnderlineTabIndicator(
                        borderSide: BorderSide(width: 5.0, color: color.blue4),
                      ),
                      controller: _controller,
                      tabs: const [
                        Tab(
                          text: 'Details',
                        ),
                        Tab(
                          text: 'Item',
                        ),
                        Tab(
                          text: 'Comment',
                        ),
                        Tab(
                          text: 'Track',
                        )
                      ],
                    ),
                  ),
                  Container(
                    height: MediaQuery.of(context).size.height,
                    child: TabBarView(
                      controller: _controller,
                      physics: const NeverScrollableScrollPhysics(),
                      children: <Widget>[
                        detailTab(),
                        itemTab(),
                        commentTab(),
                        trackTab(),
                      ],
                    ),
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  detailTab() {
    return Container(
      // color: color.blue5,
      padding: const EdgeInsets.only(top: 20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          const Text(
            'Requested By',
            style: TextStyle(
                color: color.grey3, fontSize: 14, fontWeight: FontWeight.w500),
          ),
          Container(
            height: 70,
            margin: const EdgeInsets.only(bottom: 20, left: 10, right: 10),
            color: color.grey4,
            child: Row(
              children: [
                CircleAvatar(
                  maxRadius: 20,
                  child: Image.network(
                    Controller.Received_RFP_Detail["profilePic"].toString(),
                    fit: BoxFit.cover,
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(left: 30),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(Controller.Received_RFP_Detail["createdBy"]),
                      Text(Controller.Received_RFP_Detail["email"]),
                    ],
                  ),
                )
              ],
            ),
          ),
          Container(
            color: color.grey4,
            padding: const EdgeInsets.all(8.0),
            // width: MediaQuery.maybeOf(context)!.size.width,
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Text(
                        'Location',
                        style: boldTextStle(),
                      ),
                      Text(Controller.Received_RFP_Detail["location"],
                          style: const TextStyle(
                              fontSize: 12, color: color.black)),
                      Text(
                        'Proirity',
                        style: boldTextStle(),
                      ),
                      Text(Controller.Received_RFP_Detail["priorty"],
                          style: TextStyle(fontSize: 12, color: color.black)),
                      Text(
                        'Extra Budgetory',
                        style: boldTextStle(),
                      ),
                      Text(
                          Controller.Received_RFP_Detail["extraBudgetory"]
                              .toString(),
                          style: TextStyle(fontSize: 12, color: color.black)),
                    ],
                  ),
                ),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Text(
                        'CAAC Committee Report',
                        style: boldTextStle(),
                      ),
                      const Text("",
                          style: TextStyle(fontSize: 12, color: color.black)),
                      Text(
                        'Department',
                        style: boldTextStle(),
                      ),
                      Text(Controller.Received_RFP_Detail["department"]["name"],
                          style: const TextStyle(
                              fontSize: 12, color: color.black)),
                    ],
                  ),
                )
              ],
            ),
          ),
          const Text(
            'Purpose',
            style: TextStyle(
                color: color.grey3, fontSize: 14, fontWeight: FontWeight.w500),
          ),
          const Padding(
            padding: EdgeInsets.only(top: 20, bottom: 20),
            child: const Text(""),
          ),
          Padding(
            padding: const EdgeInsets.only(bottom: 20),
            child: Container(
              height: 50,
              color: color.grey1,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Requested Cost',
                        style: TextStyle(
                            color: color.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500),
                      ),
                      Text(
                        '\$ ${Controller.Received_RFP_Detail["totalPrice"].toString()}',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 20,
                            fontWeight: FontWeight.w500),
                      )
                    ],
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Total Amount Cost',
                        style: TextStyle(
                            color: color.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500),
                      ),
                      Text(
                        '\$ ${Controller.Received_RFP_Detail["totalPrice"].toString()}',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 20,
                            fontWeight: FontWeight.w500),
                      )
                    ],
                  )
                ],
              ),
            ),
          ),
          Center(
            child: GestureDetector(
                child: const Text(
              'Approve this order ?',
              style: TextStyle(
                  color: color.perpal1,
                  fontSize: 16,
                  fontWeight: FontWeight.w500),
            )),
          ),
          Padding(
            padding: const EdgeInsets.only(top: 20, bottom: 20),
            child: Center(
              child: GestureDetector(
                  child: Container(
                    height: 50,
                    width: 200,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(14),
                        color: color.perpal1),
                    child: const Center(
                      child: Text(
                        'Approve',
                        style: TextStyle(
                            color: color.grey4,
                            fontSize: 14,
                            fontWeight: FontWeight.w500),
                      ),
                    ),
                  ),
                  onTap: () {
                    Common().toastMessage('Approved.....', context);
                  }),
            ),
          ),
          Center(
            child: Container(
              height: 50,
              width: 200,
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(14), color: color.grey6),
              child: const Center(
                child: Text(
                  'Decline',
                  style: TextStyle(
                      color: color.grey3,
                      fontSize: 14,
                      fontWeight: FontWeight.w500),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  itemTab() {
    return Container(
      padding: const EdgeInsets.only(top: 10, bottom: 5),
      // width: MediaQuery.of(context).size.width,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Text(
              '${Controller.Received_RFP_Detail['requistionItem'].length} Order Items'),
          SingleChildScrollView(
            child: Container(
              height: MediaQuery.of(context).size.height * 0.4,
              // color: color.grey1,
              child: ListView.builder(
                itemCount:
                    Controller.Received_RFP_Detail['requistionItem'].length,
                itemBuilder: (BuildContext context, int index) {
                  return Container(
                    padding: const EdgeInsets.only(
                        left: 20, right: 20, top: 5, bottom: 5),
                    margin: const EdgeInsets.only(top: 10, bottom: 10),
                    height: 70,
                    color: color.grey4,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                Controller.Received_RFP_Detail['requistionItem']
                                    [index]['itemDescription'],
                                style: boldTextStle(),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  left: 40, top: 5, bottom: 5),
                              child: Text(
                                '${Controller.Received_RFP_Detail['requistionItem'][index]['ratePerItem']} USD/Unit',
                                style: boldTextStle(),
                              ),
                            )
                          ],
                        ),
                        Text(
                            'Quantity ${Controller.Received_RFP_Detail['requistionItem'][index]['orderQuantity'].toString()}')
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(bottom: 20),
            child: Container(
              height: 50,
              color: color.grey1,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Requested Cost',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500),
                      ),
                      Text(
                        '\$ ${Controller.Received_RFP_Detail["totalPrice"].toString()}',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 20,
                            fontWeight: FontWeight.w500),
                      )
                    ],
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Total Amount Cost',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500),
                      ),
                      Text(
                        '\$ ${Controller.Received_RFP_Detail["totalPrice"].toString()}',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 20,
                            fontWeight: FontWeight.w500),
                      )
                    ],
                  )
                ],
              ),
            ),
          ),
          Center(
            child: GestureDetector(
                child: const Text(
              'Approve this order ?',
              style: TextStyle(
                  color: color.perpal1,
                  fontSize: 16,
                  fontWeight: FontWeight.w500),
            )),
          ),
          Padding(
            padding: const EdgeInsets.only(top: 20, bottom: 20),
            child: Center(
              child: Container(
                height: 50,
                width: 200,
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(14),
                    color: color.perpal1),
                child: const Center(
                  child: Text(
                    'Approve',
                    style: TextStyle(
                        color: color.grey4,
                        fontSize: 14,
                        fontWeight: FontWeight.w500),
                  ),
                ),
              ),
            ),
          ),
          Center(
            child: Container(
              height: 50,
              width: 200,
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(14), color: color.grey6),
              child: const Center(
                child: Text(
                  'Decline',
                  style: TextStyle(
                      color: color.grey3,
                      fontSize: 14,
                      fontWeight: FontWeight.w500),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  commentTab() {
    return Container(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Padding(
            padding: EdgeInsets.only(top: 10, bottom: 20),
            child: Text('Comment ( optional )'),
          ),
          Padding(
            padding: const EdgeInsets.only(bottom: 20),
            child: Container(
                padding: const EdgeInsets.all(8.0),
                decoration: const BoxDecoration(color: color.grey4),
                height: 250,
                child: TextField(
                  decoration: const InputDecoration(
                      border: InputBorder.none, hintMaxLines: 10),
                  controller: comment_TXT,
                )),
          ),
          Padding(
            padding: const EdgeInsets.only(bottom: 20),
            child: Container(
              padding: const EdgeInsets.all(10.0),
              color: color.grey1,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Requested Cost',
                        style: TextStyle(
                            color: color.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500),
                      ),
                      Text(
                        '\$ ${Controller.Received_RFP_Detail["totalPrice"].toString()}',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 20,
                            fontWeight: FontWeight.w500),
                      )
                    ],
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'Total Amount Cost',
                        style: TextStyle(
                            color: color.black,
                            fontSize: 16,
                            fontWeight: FontWeight.w500),
                      ),
                      Text(
                        '\$ ${Controller.Received_RFP_Detail["totalPrice"].toString()}',
                        style: const TextStyle(
                            color: color.black,
                            fontSize: 20,
                            fontWeight: FontWeight.w500),
                      )
                    ],
                  )
                ],
              ),
            ),
          ),
          Center(
            child: GestureDetector(
                child: const Text(
              'Approve this order ?',
              style: TextStyle(
                  color: color.perpal1,
                  fontSize: 16,
                  fontWeight: FontWeight.w500),
            )),
          ),
          Padding(
            padding: const EdgeInsets.only(top: 20, bottom: 20),
            child: Center(
              child: Container(
                height: 50,
                width: 200,
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(14),
                    color: color.perpal1),
                child: const Center(
                  child: Text(
                    'Approve',
                    style: TextStyle(
                        color: color.grey4,
                        fontSize: 14,
                        fontWeight: FontWeight.w500),
                  ),
                ),
              ),
            ),
          ),
          Center(
            child: Container(
              height: 50,
              width: 200,
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(14), color: color.grey6),
              child: const Center(
                child: Text(
                  'Decline',
                  style: TextStyle(
                      color: color.grey3,
                      fontSize: 14,
                      fontWeight: FontWeight.w500),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  trackTab() {
    return Container(
      // color: color.perpal1,
      // height: 300,
      child: Column(
        children: [
          const Text('Timeline'),
          Container(
            height: 500,
            child: Stepper(
              steps: stepsList,
              currentStep: current_step,
              type: StepperType.vertical,
              controlsBuilder:
                  (BuildContext context, ControlsDetails controls) {
                return Row();
              },
              onStepTapped: (step) {
                setState(() {
                  current_step = step;
                });
              },
              // onStepContinue: () {
              //   if (current_step < stepsList.length - 1) {
              //     setState(() {
              //       current_step++;
              //     });
              //   }
              // },
              // onStepCancel: () {
              //   setState(() {
              //     if (current_step > 0) {
              //       current_step--;
              //     }
              //   });
              // },
            ),
          )
        ],
      ),
    );
  }

  boldTextStle() {
    return const TextStyle(
        fontSize: 14, fontWeight: FontWeight.w500, color: color.black);
  }
}
